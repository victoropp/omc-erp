# API Gateway Deployment with Load Balancing and Auto-scaling
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: omc-erp
  labels:
    app: api-gateway
    component: gateway
    version: v1
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: api-gateway
      version: v1
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
        component: gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: api-gateway-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: api-gateway
        image: omc-erp/api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Application Configuration
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: METRICS_PORT
          value: "9090"
        
        # Service URLs from ConfigMap
        - name: AUTH_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: AUTH_SERVICE_URL
        - name: TRANSACTION_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: TRANSACTION_SERVICE_URL
        - name: PRICING_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: PRICING_SERVICE_URL
        - name: STATION_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: STATION_SERVICE_URL
        - name: INVENTORY_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: INVENTORY_SERVICE_URL
        - name: CUSTOMER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: CUSTOMER_SERVICE_URL
        - name: PAYMENT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: PAYMENT_SERVICE_URL
        
        # Database Configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: omc-erp-secrets
              key: REDIS_PASSWORD
        
        # Kafka Configuration
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: KAFKA_BROKERS
        - name: KAFKA_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: KAFKA_CLIENT_ID
        
        # Security Configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: omc-erp-secrets
              key: JWT_SECRET
        - name: RATE_LIMIT_WINDOW_MS
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: RATE_LIMIT_WINDOW_MS
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: RATE_LIMIT_MAX_REQUESTS
        
        # CORS Configuration
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: CORS_ORIGINS
        
        # Monitoring Configuration
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: ENABLE_METRICS
        - name: ENABLE_TRACING
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: ENABLE_TRACING
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: JAEGER_ENDPOINT
        
        # Business Configuration
        - name: DEFAULT_CURRENCY
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: DEFAULT_CURRENCY
        - name: DEFAULT_TIMEZONE
          valueFrom:
            configMapKeyRef:
              name: omc-erp-config
              key: DEFAULT_TIMEZONE
        
        # Kubernetes Metadata
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: omc-erp-config
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute-optimized
      
      tolerations:
      - key: "high-load"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: api-gateway

---
# Service Account for API Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  namespace: omc-erp
  labels:
    app: api-gateway
automountServiceAccountToken: true

---
# ClusterRole for API Gateway
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-gateway-role
  labels:
    app: api-gateway
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for API Gateway
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-gateway-binding
  labels:
    app: api-gateway
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: api-gateway-role
subjects:
- kind: ServiceAccount
  name: api-gateway-sa
  namespace: omc-erp

---
# Service for API Gateway
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: omc-erp
  labels:
    app: api-gateway
    component: gateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  sessionAffinity: None
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: api-gateway
  loadBalancerSourceRanges:
  - 0.0.0.0/0

---
# Internal Service for API Gateway (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: omc-erp
  labels:
    app: api-gateway
    component: gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: api-gateway

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: omc-erp
  labels:
    app: api-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: omc-erp
  labels:
    app: api-gateway
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway

---
# Network Policy for API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-netpol
  namespace: omc-erp
  labels:
    app: api-gateway
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: omc-erp-monitoring
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  egress:
  # Allow all outbound traffic to other services
  - to:
    - podSelector:
        matchLabels:
          component: microservice
    ports:
    - protocol: TCP
      port: 3001  # Auth Service
    - protocol: TCP
      port: 3002  # Transaction Service
    - protocol: TCP
      port: 3003  # Station Service
    - protocol: TCP
      port: 3004  # Pricing Service
  # Allow Redis access
  - to:
    - podSelector:
        matchLabels:
          app: redis-master
    ports:
    - protocol: TCP
      port: 6379
  # Allow Kafka access
  - to:
    - podSelector:
        matchLabels:
          app: kafka
    ports:
    - protocol: TCP
      port: 9092
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443