"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
nimport;
{
    motion, AnimatePresence;
}
from;
'framer-motion';
nimport;
{
    FuturisticDashboardLayout;
}
from;
'@/components/layout/FuturisticDashboardLayout';
nimport;
{
    useTheme;
}
from;
'@/contexts/ThemeContext';
nimport;
{
    toast;
}
from;
'react-hot-toast';
n;
ninterface;
PriceComponent;
{
    n;
    id ?  : string;
    n;
    componentType: string;
    n;
    componentName: string;
    n;
    category: string;
    n;
    amount: number;
    n;
    currency: string;
    n;
    isPercentage: boolean;
    n;
    percentageBase ?  : string;
    n;
    stationType ?  : string;
    n;
    isMandatory: boolean;
    n;
    isConfigurable: boolean;
    n;
    minAmount ?  : number;
    n;
    maxAmount ?  : number;
    n;
    displayOrder: number;
    n;
    description ?  : string;
    n;
    regulatoryReference ?  : string;
    n;
    effectiveDate: string;
    n;
    expiryDate ?  : string;
    n;
}
n;
ninterface;
PriceBuildupVersion;
{
    n;
    id ?  : string;
    n;
    versionNumber ?  : number;
    n;
    productType: string;
    n;
    effectiveDate: string;
    n;
    expiryDate ?  : string;
    n;
    status: string;
    n;
    totalPrice ?  : number;
    n;
    changeReason ?  : string;
    n;
    approvalRequired: boolean;
    n;
    components: PriceComponent[];
    n;
}
n;
ninterface;
StationTypeConfig;
{
    n;
    stationType: string;
    n;
    stationTypeName: string;
    n;
    description: string;
    n;
    isActive: boolean;
    n;
    applicableComponents: string[];
    n;
    supportedProducts: string[];
    n;
    baseDealerMargin: number;
    n;
    baseTransportCost: number;
    n;
}
n;
nconst;
PRODUCT_TYPES = [n, { value: 'PETROL', label: 'Premium Petrol' }, n, { value: 'DIESEL', label: 'Gas Oil (Diesel)' }, n, { value: 'LPG', label: 'Liquefied Petroleum Gas' }, n, { value: 'KEROSENE', label: 'Dual Purpose Kerosene' }, n, { value: 'FUEL_OIL', label: 'Fuel Oil' }, n];
n;
nconst;
STATION_TYPES = [n, { value: 'COCO', label: 'Company Owned Company Operated', description: 'Direct company operations' }, n, { value: 'DOCO', label: 'Dealer Owned Company Operated', description: 'Company operated, dealer owned' }, n, { value: 'DODO', label: 'Dealer Owned Dealer Operated', description: 'Independent dealer operations' }, n, { value: 'INDUSTRIAL', label: 'Industrial Customer', description: 'Large industrial consumers' }, n, { value: 'COMMERCIAL', label: 'Commercial Customer', description: 'Commercial fleet customers' }, n, { value: 'BULK_CONSUMER', label: 'Bulk Consumer', description: 'High volume consumers' }, n];
n;
nconst;
COMPONENT_TYPES = [n, { value: 'EX_REFINERY_PRICE', label: 'Ex-Refinery Price', category: 'BASE_PRICE' }, n, { value: 'ENERGY_DEBT_RECOVERY_LEVY', label: 'Energy Debt Recovery Levy', category: 'TAX_LEVY' }, n, { value: 'ROAD_FUND_LEVY', label: 'Road Fund Levy', category: 'TAX_LEVY' }, n, { value: 'PRICE_STABILIZATION_LEVY', label: 'Price Stabilization Levy', category: 'TAX_LEVY' }, n, { value: 'SPECIAL_PETROLEUM_TAX', label: 'Special Petroleum Tax', category: 'TAX_LEVY' }, n, { value: 'FUEL_MARKING_LEVY', label: 'Fuel Marking Levy', category: 'TAX_LEVY' }, n, { value: 'PRIMARY_DISTRIBUTION_MARGIN', label: 'Primary Distribution Margin', category: 'MARGIN' }, n, { value: 'BOST_MARGIN', label: 'BOST Margin', category: 'MARGIN' }, n, { value: 'UPPF_MARGIN', label: 'UPPF Margin', category: 'MARGIN' }, n, { value: 'FUEL_MARKING_MARGIN', label: 'Fuel Marking Margin', category: 'MARGIN' }, n, { value: 'OMC_MARGIN', label: 'OMC Margin', category: 'MARGIN' }, n, { value: 'DEALER_MARGIN', label: 'Dealer Margin', category: 'MARGIN' }, n, { value: 'TRANSPORT_COST', label: 'Transport Cost', category: 'COST' }, n, { value: 'STORAGE_COST', label: 'Storage Cost', category: 'COST' }, n];
n;
nexport;
function PriceBuildupConfigurationPage() { n; const { actualTheme } = useTheme(); n; const [selectedTab, setSelectedTab] = (0, react_1.useState)('versions'); n; const [selectedProductType, setSelectedProductType] = (0, react_1.useState)('PETROL'); n; const [buildupVersions, setBuildupVersions] = (0, react_1.useState)([]); n; const [stationTypes, setStationTypes] = (0, react_1.useState)([]); n; const [loading, setLoading] = (0, react_1.useState)(true); n; const [saving, setSaving] = (0, react_1.useState)(false); n; const [showCreateModal, setShowCreateModal] = (0, react_1.useState)(false); n; const [editingVersion, setEditingVersion] = (0, react_1.useState)(null); n; const [showCalculator, setShowCalculator] = (0, react_1.useState)(false); n; n; (0, react_1.useEffect)(() => { n; loadPriceBuildupVersions(); n; loadStationTypes(); n; }, [selectedProductType]); n; n; const loadPriceBuildupVersions = async () => { n; try {
    n;
    setLoading(true);
    n;
}
finally { } }; } // In production, this would fetch from the API\n      // const response = await fetch(`/api/price-buildup/versions?productType=${selectedProductType}`);\n      // const data = await response.json();\n      \n      // Mock data for demonstration\n      const mockVersions: PriceBuildupVersion[] = [\n        {\n          id: '1',\n          versionNumber: 3,\n          productType: selectedProductType,\n          effectiveDate: '2025-01-16',\n          status: 'ACTIVE',\n          totalPrice: 16.75,\n          changeReason: 'Updated ex-refinery price based on international market changes',\n          approvalRequired: true,\n          components: [\n            {\n              componentType: 'EX_REFINERY_PRICE',\n              componentName: 'Ex-Refinery Price',\n              category: 'BASE_PRICE',\n              amount: 11.50,\n              currency: 'GHS',\n              isPercentage: false,\n              isMandatory: true,\n              isConfigurable: true,\n              displayOrder: 1,\n              description: 'Base price from refinery',\n              effectiveDate: '2025-01-16',\n            },\n            {\n              componentType: 'ENERGY_DEBT_RECOVERY_LEVY',\n              componentName: 'Energy Debt Recovery Levy',\n              category: 'TAX_LEVY',\n              amount: 0.20,\n              currency: 'GHS',\n              isPercentage: false,\n              isMandatory: true,\n              isConfigurable: false,\n              displayOrder: 2,\n              regulatoryReference: 'Energy Commission Act 2011',\n              effectiveDate: '2025-01-16',\n            },\n            {\n              componentType: 'ROAD_FUND_LEVY',\n              componentName: 'Road Fund Levy',\n              category: 'TAX_LEVY',\n              amount: 0.50,\n              currency: 'GHS',\n              isPercentage: false,\n              isMandatory: true,\n              isConfigurable: false,\n              displayOrder: 3,\n              regulatoryReference: 'Road Fund Act 1997',\n              effectiveDate: '2025-01-16',\n            },\n            {\n              componentType: 'DEALER_MARGIN',\n              componentName: 'Dealer Margin',\n              category: 'MARGIN',\n              amount: 0.25,\n              currency: 'GHS',\n              isPercentage: false,\n              isMandatory: true,\n              isConfigurable: true,\n              displayOrder: 10,\n              minAmount: 0.15,\n              maxAmount: 0.35,\n              description: 'Margin for retail dealers',\n              effectiveDate: '2025-01-16',\n            },\n          ],\n        },\n        {\n          id: '2',\n          versionNumber: 2,\n          productType: selectedProductType,\n          effectiveDate: '2024-12-01',\n          expiryDate: '2025-01-15',\n          status: 'ARCHIVED',\n          totalPrice: 16.25,\n          changeReason: 'Previous pricing version',\n          approvalRequired: true,\n          components: [],\n        },\n      ];\n      \n      setBuildupVersions(mockVersions);\n    } catch (error) {\n      toast.error('Failed to load price buildup versions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadStationTypes = async () => {\n    try {\n      // Mock data for demonstration\n      const mockStationTypes: StationTypeConfig[] = [\n        {\n          stationType: 'COCO',\n          stationTypeName: 'Company Owned Company Operated',\n          description: 'Stations owned and operated by the company',\n          isActive: true,\n          applicableComponents: ['EX_REFINERY_PRICE', 'ENERGY_DEBT_RECOVERY_LEVY', 'ROAD_FUND_LEVY', 'OMC_MARGIN'],\n          supportedProducts: ['PETROL', 'DIESEL', 'LPG'],\n          baseDealerMargin: 0.15,\n          baseTransportCost: 0.05,\n        },\n        {\n          stationType: 'DODO',\n          stationTypeName: 'Dealer Owned Dealer Operated',\n          description: 'Independent dealer operations',\n          isActive: true,\n          applicableComponents: ['EX_REFINERY_PRICE', 'ENERGY_DEBT_RECOVERY_LEVY', 'ROAD_FUND_LEVY', 'DEALER_MARGIN'],\n          supportedProducts: ['PETROL', 'DIESEL'],\n          baseDealerMargin: 0.25,\n          baseTransportCost: 0.08,\n        },\n      ];\n      \n      setStationTypes(mockStationTypes);\n    } catch (error) {\n      toast.error('Failed to load station types');\n    }\n  };\n\n  const handleCreateVersion = async (versionData: Partial<PriceBuildupVersion>) => {\n    try {\n      setSaving(true);\n      // In production, this would call the API\n      // await fetch('/api/price-buildup/versions', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(versionData),\n      // });\n      \n      toast.success('Price buildup version created successfully');\n      setShowCreateModal(false);\n      await loadPriceBuildupVersions();\n    } catch (error) {\n      toast.error('Failed to create price buildup version');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleApproveVersion = async (versionId: string) => {\n    try {\n      setSaving(true);\n      // In production, this would call the approval API\n      toast.success('Price buildup version submitted for approval');\n      await loadPriceBuildupVersions();\n    } catch (error) {\n      toast.error('Failed to submit for approval');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const renderVersionsTab = () => (\n    <div className=\"space-y-6\">\n      {/* Header with controls */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className={`text-2xl font-bold ${\n            actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n          }`}>\n            Price Buildup Versions\n          </h2>\n          <p className={`mt-1 ${\n            actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n          }`}>\n            Manage pricing components and their effective periods\n          </p>\n        </div>\n        \n        <div className=\"flex gap-3\">\n          <select\n            value={selectedProductType}\n            onChange={(e) => setSelectedProductType(e.target.value)}\n            className={`px-4 py-2 rounded-lg border transition-colors ${\n              actualTheme === 'dark'\n                ? 'bg-dark-700 border-dark-600 text-white'\n                : 'bg-white border-gray-300 text-gray-900'\n            } focus:ring-2 focus:ring-primary-500`}\n          >\n            {PRODUCT_TYPES.map(type => (\n              <option key={type.value} value={type.value}>\n                {type.label}\n              </option>\n            ))}\n          </select>\n          \n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setShowCreateModal(true)}\n            className=\"px-6 py-2 bg-gradient-primary text-white rounded-lg font-medium\"\n          >\n            Create New Version\n          </motion.button>\n          \n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setShowCalculator(true)}\n            className={`px-6 py-2 rounded-lg border font-medium transition-colors ${\n              actualTheme === 'dark'\n                ? 'border-dark-500 text-dark-300 hover:bg-dark-700'\n                : 'border-gray-300 text-gray-700 hover:bg-gray-100'\n            }`}\n          >\n            Price Calculator\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Versions List */}\n      <div className=\"space-y-4\">\n        {buildupVersions.map(version => (\n          <motion.div\n            key={version.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className={`glass rounded-xl p-6 border ${\n              actualTheme === 'dark' ? 'border-white/10' : 'border-gray-200'\n            }`}\n          >\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <h3 className={`text-lg font-semibold ${\n                    actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    Version {version.versionNumber} - {version.productType}\n                  </h3>\n                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                    version.status === 'ACTIVE'\n                      ? 'bg-green-100 text-green-800'\n                      : version.status === 'PENDING_APPROVAL'\n                      ? 'bg-yellow-100 text-yellow-800'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    {version.status.replace('_', ' ')}\n                  </span>\n                </div>\n                \n                <div className={`text-sm space-y-1 ${\n                  actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n                }`}>\n                  <p>Effective: {new Date(version.effectiveDate).toLocaleDateString()}</p>\n                  {version.expiryDate && (\n                    <p>Expires: {new Date(version.expiryDate).toLocaleDateString()}</p>\n                  )}\n                  <p>Total Price: GHS {version.totalPrice?.toFixed(4) || 'Calculating...'}</p>\n                  {version.changeReason && (\n                    <p>Reason: {version.changeReason}</p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                {version.status === 'DRAFT' && (\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => handleApproveVersion(version.id!)}\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded-lg text-sm font-medium\"\n                  >\n                    Submit for Approval\n                  </motion.button>\n                )}\n                \n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => setEditingVersion(version)}\n                  className=\"px-4 py-2 bg-gray-500 text-white rounded-lg text-sm font-medium\"\n                >\n                  Edit\n                </motion.button>\n              </div>\n            </div>\n            \n            {/* Components Summary */}\n            <div className=\"border-t pt-4 mt-4\">\n              <h4 className={`font-medium mb-2 ${\n                actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n              }`}>\n                Price Components ({version.components.length})\n              </h4>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {version.components.slice(0, 6).map(component => (\n                  <div\n                    key={component.componentType}\n                    className={`p-3 rounded-lg border ${\n                      actualTheme === 'dark'\n                        ? 'border-dark-600 bg-dark-700/50'\n                        : 'border-gray-200 bg-gray-50'\n                    }`}\n                  >\n                    <div className={`font-medium text-sm ${\n                      actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                    }`}>\n                      {component.componentName}\n                    </div>\n                    <div className={`text-sm ${\n                      actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n                    }`}>\n                      GHS {component.amount.toFixed(4)}\n                    </div>\n                    <div className={`text-xs ${\n                      component.category === 'BASE_PRICE'\n                        ? 'text-blue-500'\n                        : component.category === 'TAX_LEVY'\n                        ? 'text-red-500'\n                        : 'text-green-500'\n                    }`}>\n                      {component.category.replace('_', ' ')}\n                    </div>\n                  </div>\n                ))}\n                \n                {version.components.length > 6 && (\n                  <div className={`p-3 rounded-lg border border-dashed flex items-center justify-center ${\n                    actualTheme === 'dark'\n                      ? 'border-dark-600 text-dark-400'\n                      : 'border-gray-300 text-gray-600'\n                  }`}>\n                    +{version.components.length - 6} more\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderStationTypesTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className={`text-2xl font-bold ${\n            actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n          }`}>\n            Station Type Configuration\n          </h2>\n          <p className={`mt-1 ${\n            actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n          }`}>\n            Configure pricing rules for different station types\n          </p>\n        </div>\n        \n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          className=\"px-6 py-2 bg-gradient-primary text-white rounded-lg font-medium\"\n        >\n          Add Station Type\n        </motion.button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {stationTypes.map(stationType => (\n          <motion.div\n            key={stationType.stationType}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className={`glass rounded-xl p-6 border ${\n              actualTheme === 'dark' ? 'border-white/10' : 'border-gray-200'\n            }`}\n          >\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 className={`text-lg font-semibold ${\n                  actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                }`}>\n                  {stationType.stationTypeName}\n                </h3>\n                <p className={`text-sm mt-1 ${\n                  actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n                }`}>\n                  {stationType.description}\n                </p>\n              </div>\n              \n              <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                stationType.isActive\n                  ? 'bg-green-100 text-green-800'\n                  : 'bg-gray-100 text-gray-800'\n              }`}>\n                {stationType.isActive ? 'Active' : 'Inactive'}\n              </span>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label className={`text-sm font-medium ${\n                  actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                }`}>\n                  Base Dealer Margin\n                </label>\n                <p className={`text-lg font-semibold ${\n                  actualTheme === 'dark' ? 'text-primary-400' : 'text-primary-600'\n                }`}>\n                  GHS {stationType.baseDealerMargin.toFixed(4)}\n                </p>\n              </div>\n              \n              <div>\n                <label className={`text-sm font-medium ${\n                  actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                }`}>\n                  Base Transport Cost\n                </label>\n                <p className={`text-lg font-semibold ${\n                  actualTheme === 'dark' ? 'text-primary-400' : 'text-primary-600'\n                }`}>\n                  GHS {stationType.baseTransportCost.toFixed(4)}\n                </p>\n              </div>\n              \n              <div>\n                <label className={`text-sm font-medium ${\n                  actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                }`}>\n                  Supported Products ({stationType.supportedProducts.length})\n                </label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {stationType.supportedProducts.map(product => (\n                    <span\n                      key={product}\n                      className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                    >\n                      {product}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <label className={`text-sm font-medium ${\n                  actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n                }`}>\n                  Applicable Components ({stationType.applicableComponents.length})\n                </label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {stationType.applicableComponents.slice(0, 3).map(component => (\n                    <span\n                      key={component}\n                      className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full\"\n                    >\n                      {component.replace('_', ' ')}\n                    </span>\n                  ))}\n                  {stationType.applicableComponents.length > 3 && (\n                    <span className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full\">\n                      +{stationType.applicableComponents.length - 3} more\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2 mt-4 pt-4 border-t\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"flex-1 px-4 py-2 bg-primary-500 text-white rounded-lg text-sm font-medium\"\n              >\n                Edit Configuration\n              </motion.button>\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`px-4 py-2 rounded-lg text-sm font-medium border ${\n                  actualTheme === 'dark'\n                    ? 'border-dark-500 text-dark-300 hover:bg-dark-700'\n                    : 'border-gray-300 text-gray-700 hover:bg-gray-100'\n                }`}\n              >\n                View Details\n              </motion.button>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderApprovalTab = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className={`text-2xl font-bold ${\n          actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n        }`}>\n          Approval Workflow\n        </h2>\n        <p className={`mt-1 ${\n          actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n        }`}>\n          Review and approve pending price buildup changes\n        </p>\n      </div>\n\n      {/* Pending Approvals */}\n      <div className={`glass rounded-xl p-6 border ${\n        actualTheme === 'dark' ? 'border-white/10' : 'border-gray-200'\n      }`}>\n        <h3 className={`text-lg font-semibold mb-4 ${\n          actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n        }`}>\n          Pending Approvals\n        </h3>\n        \n        <div className={`text-center py-8 ${\n          actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n        }`}>\n          <p>No pending approvals at this time.</p>\n        </div>\n      </div>\n\n      {/* Approval History */}\n      <div className={`glass rounded-xl p-6 border ${\n        actualTheme === 'dark' ? 'border-white/10' : 'border-gray-200'\n      }`}>\n        <h3 className={`text-lg font-semibold mb-4 ${\n          actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n        }`}>\n          Recent Approval History\n        </h3>\n        \n        <div className={`text-center py-8 ${\n          actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n        }`}>\n          <p>No recent approval history.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <FuturisticDashboardLayout>\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className={`text-3xl font-bold mb-2 ${\n            actualTheme === 'dark' ? 'text-white' : 'text-gray-900'\n          }`}>\n            Price Build-up Configuration\n          </h1>\n          <p className={`${\n            actualTheme === 'dark' ? 'text-dark-400' : 'text-gray-600'\n          }`}>\n            Comprehensive pricing component management and configuration system\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"mb-8\">\n          <div className={`flex border-b ${\n            actualTheme === 'dark' ? 'border-dark-600' : 'border-gray-200'\n          }`}>\n            {[\n              { key: 'versions', label: 'Price Versions', icon: '📊' },\n              { key: 'station-types', label: 'Station Types', icon: '⛽' },\n              { key: 'approval', label: 'Approval Workflow', icon: '✅' },\n            ].map(tab => (\n              <motion.button\n                key={tab.key}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => setSelectedTab(tab.key as any)}\n                className={`flex items-center space-x-2 px-6 py-3 font-medium transition-colors ${\n                  selectedTab === tab.key\n                    ? actualTheme === 'dark'\n                      ? 'text-primary-400 border-b-2 border-primary-400'\n                      : 'text-primary-600 border-b-2 border-primary-600'\n                    : actualTheme === 'dark'\n                    ? 'text-dark-400 hover:text-dark-200'\n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                <span className=\"text-lg\">{tab.icon}</span>\n                <span>{tab.label}</span>\n              </motion.button>\n            ))}\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={selectedTab}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.2 }}\n          >\n            {selectedTab === 'versions' && renderVersionsTab()}\n            {selectedTab === 'station-types' && renderStationTypesTab()}\n            {selectedTab === 'approval' && renderApprovalTab()}\n          </motion.div>\n        </AnimatePresence>\n      </div>\n    </FuturisticDashboardLayout>\n  );\n}"
//# sourceMappingURL=build-up-configuration.js.map