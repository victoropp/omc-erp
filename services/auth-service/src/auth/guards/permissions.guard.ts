import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { RbacService } from '../services/rbac.service';\nimport { PERMISSIONS_KEY } from '../decorators/permissions.decorator';\n\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private rbacService: RbacService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const requiredPermissions = this.reflector.getAllAndOverride<string[]>(PERMISSIONS_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    \n    if (!requiredPermissions) {\n      return true;\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    \n    if (!user) {\n      return false;\n    }\n\n    // Check if user has all required permissions\n    for (const permission of requiredPermissions) {\n      const hasPermission = await this.rbacService.hasPermission(user.sub, permission);\n      if (!hasPermission) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n}"