{
  "info": {
    "name": "OMC ERP - Authentication API",
    "description": "Comprehensive API tests for Ghana OMC ERP Authentication Service",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL",
          "pm.environment.set('base_url', 'http://localhost:3001/api/v1');",
          "",
          "// Generate unique test data",
          "const timestamp = Date.now();",
          "pm.environment.set('timestamp', timestamp);",
          "pm.environment.set('test_email', `test_${timestamp}@omc-erp.com`);",
          "pm.environment.set('test_username', `testuser_${timestamp}`);",
          "",
          "// Set tenant ID for testing",
          "pm.environment.set('tenant_id', 'test-tenant-123');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test validations",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Content-Type is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001/api/v1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Flow",
      "item": [
        {
          "name": "Register New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user).to.have.property('id');",
                  "    pm.expect(responseJson.user).to.have.property('email');",
                  "    pm.expect(responseJson.user.email).to.eql(pm.environment.get('test_email'));",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('accessToken');",
                  "    pm.expect(responseJson).to.have.property('refreshToken');",
                  "    pm.expect(responseJson).to.have.property('tokenType', 'Bearer');",
                  "    pm.expect(responseJson).to.have.property('expiresIn');",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.environment.set('access_token', responseJson.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.refreshToken);",
                  "    pm.environment.set('user_id', responseJson.user.id);",
                  "});",
                  "",
                  "pm.test('User has correct tenant assignment', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user).to.have.property('tenantId', pm.environment.get('tenant_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"username\": \"{{test_username}}\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login Existing User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user data and tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson).to.have.property('accessToken');",
                  "    pm.expect(responseJson).to.have.property('refreshToken');",
                  "    ",
                  "    // Update tokens",
                  "    pm.environment.set('access_token', responseJson.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.refreshToken);",
                  "});",
                  "",
                  "pm.test('JWT token is valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.accessToken;",
                  "    ",
                  "    // JWT has 3 parts separated by dots",
                  "    const parts = token.split('.');",
                  "    pm.expect(parts).to.have.lengthOf(3);",
                  "    ",
                  "    // Each part should be base64 encoded",
                  "    parts.forEach(part => {",
                  "        pm.expect(part).to.match(/^[A-Za-z0-9_-]+$/);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"SecurePassword123!\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains correct user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id', pm.environment.get('user_id'));",
                  "    pm.expect(responseJson).to.have.property('email', pm.environment.get('test_email'));",
                  "    pm.expect(responseJson).to.have.property('tenantId', pm.environment.get('tenant_id'));",
                  "});",
                  "",
                  "pm.test('Profile does not contain sensitive data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.not.have.property('passwordHash');",
                  "    pm.expect(responseJson).to.not.have.property('refreshToken');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Refresh Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New tokens received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('accessToken');",
                  "    pm.expect(responseJson).to.have.property('refreshToken');",
                  "    ",
                  "    // Tokens should be different from previous ones",
                  "    const oldAccessToken = pm.environment.get('access_token');",
                  "    pm.expect(responseJson.accessToken).to.not.eql(oldAccessToken);",
                  "    ",
                  "    // Update tokens",
                  "    pm.environment.set('access_token', responseJson.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Password change successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"SecurePassword123!\",\n  \"newPassword\": \"NewSecurePassword456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "change-password"]
            }
          }
        },
        {
          "name": "Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear tokens from environment",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Register with Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Duplicate email registration fails', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates duplicate email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"AnotherPassword123!\",\n  \"firstName\": \"Another\",\n  \"lastName\": \"User\",\n  \"username\": \"anotheruser\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid login fails', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is generic', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Invalid credentials');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistent\",\n  \"password\": \"wrongpassword\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Access Protected Endpoint Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access fails', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error indicates authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Use Invalid JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid token fails', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error indicates invalid token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Refresh with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid refresh token fails', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Access denied message received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('Access Denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"invalid-refresh-token\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          }
        }
      ]
    },
    {
      "name": "Input Validation",
      "item": [
        {
          "name": "Register with Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid email format fails', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error message received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email-format\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"username\": \"testuser\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register with Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Weak password fails', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Password strength error message received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"weakpassword@test.com\",\n  \"password\": \"123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"username\": \"weakpassuser\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register with Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Missing required fields fails', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error indicates missing fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"incomplete@test.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "SQL Injection Attempt in Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('SQL injection attempt fails safely', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('No sensitive information leaked', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.not.include('SELECT');",
                  "    pm.expect(responseBody).to.not.include('DROP');",
                  "    pm.expect(responseBody).to.not.include('TABLE');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin'; DROP TABLE users; --\",\n  \"password\": \"password' OR '1'='1\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "XSS Attempt in Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('XSS attempt handled safely', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Script tags not executed', function () {",
                  "    const responseBody = pm.response.text();",
                  "    pm.expect(responseBody).to.not.include('<script>');",
                  "    pm.expect(responseBody).to.not.include('javascript:');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"xss@test.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"<script>alert('XSS')</script>\",\n  \"lastName\": \"javascript:alert('XSS')\",\n  \"username\": \"xssuser\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Rate Limiting Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test should be run multiple times rapidly",
                  "pm.test('Response received', function () {",
                  "    // Should eventually get 429 Too Many Requests",
                  "    pm.expect([200, 401, 429]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit error message received', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('message');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"ratelimittest\",\n  \"password\": \"password\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Login Performance Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login response time under 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Login successful or expected error', function () {",
                  "    pm.expect([200, 401]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{test_username}}\",\n  \"password\": \"NewSecurePassword456!\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Token Generation Performance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token generation under 200ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  "pm.test('Refresh successful or expected error', function () {",
                  "    pm.expect([200, 403]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          }
        }
      ]
    }
  ]
}