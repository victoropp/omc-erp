/**
 * Test Data Factory for OMC ERP System
 * Provides comprehensive test data generation for all UPPF features
 */
export declare class TestDataFactory {
    private static readonly DEFAULT_TENANT_ID;
    private static readonly DEFAULT_USER_ID;
    static createTestDelivery(overrides?: Partial<any>): {
        id: any;
        consignmentNumber: string;
        tenantId: string;
        routeId: any;
        litresLoaded: any;
        litresReceived: any;
        loadingDate: any;
        deliveryDate: any;
        driverName: any;
        vehicleNumber: any;
        depotName: any;
        stationName: any;
        productType: any;
        tankNumber: any;
        temperature: any;
        density: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestEqualisationPoint(overrides?: Partial<any>): {
        id: any;
        routeId: any;
        kmThreshold: any;
        tariffPerLitreKm: any;
        effectiveFrom: any;
        effectiveTo: any;
        tenantId: string;
        createdBy: string;
        notes: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestClaim(overrides?: Partial<any>): {
        id: any;
        claimId: string;
        windowId: any;
        deliveryId: any;
        routeId: any;
        kmBeyondEqualisation: any;
        litresMoved: any;
        tariffPerLitreKm: any;
        amountDue: number;
        status: any;
        evidenceLinks: any;
        notes: any;
        tenantId: string;
        createdBy: string;
        submittedAt: any;
        submittedBy: any;
        submissionReference: any;
        amountPaid: any;
        paidAt: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestGPSTrace(overrides?: Partial<any>): {
        id: any;
        deliveryId: any;
        tenantId: string;
        startTime: any;
        endTime: any;
        totalKm: any;
        routePoints: any;
        anomaliesDetected: any;
        confidenceScore: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestCreateClaimDto(overrides?: Partial<any>): {
        windowId: any;
        deliveryId: any;
        routeId: any;
        kmActual: any;
        litresMoved: any;
        gpsTrace: any;
        evidenceLinks: any;
    };
    static createTestPricingWindow(overrides?: Partial<any>): {
        id: any;
        windowId: any;
        title: any;
        startDate: any;
        endDate: any;
        status: any;
        npaGuidelineDocId: any;
        effectiveRegions: any;
        approvalRequiredBy: any;
        tenantId: string;
        createdBy: string;
        approvedBy: any;
        approvedAt: any;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestStationPrice(overrides?: Partial<any>): {
        id: any;
        stationId: any;
        productId: any;
        windowId: any;
        exPumpPrice: any;
        calcBreakdownJson: any;
        publishedAt: any;
        publishedBy: any;
        tenantId: string;
        calculatedBy: string;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestDealer(overrides?: Partial<any>): {
        id: any;
        dealerCode: any;
        businessName: any;
        contactPerson: any;
        phoneNumber: any;
        emailAddress: any;
        physicalAddress: any;
        gpsCoordinates: any;
        regionId: any;
        districtId: any;
        licenseNumber: any;
        licenseExpiryDate: any;
        creditLimit: any;
        currentBalance: any;
        marginPercentage: any;
        isActive: any;
        tenantId: string;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestDealerSettlement(overrides?: Partial<any>): {
        id: any;
        settlementId: any;
        dealerCode: any;
        windowId: any;
        settlementPeriodStart: any;
        settlementPeriodEnd: any;
        totalSales: any;
        totalMargin: any;
        creditRepayment: any;
        netPayment: any;
        status: any;
        generatedAt: any;
        processedAt: any;
        processedBy: any;
        paymentReference: any;
        tenantId: string;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestRevenueTransaction(overrides?: Partial<any>): {
        id: any;
        transactionId: any;
        dealerCode: any;
        stationId: any;
        productId: any;
        quantity: any;
        unitPrice: any;
        totalAmount: any;
        transactionDate: any;
        performanceObligationMet: any;
        revenueRecognitionDate: any;
        ifrsCategory: any;
        contractAssetValue: any;
        contractLiabilityValue: any;
        tenantId: string;
        createdAt: Date;
        updatedAt: Date;
    };
    static createTestECLAssessment(overrides?: Partial<any>): {
        id: any;
        assessmentId: any;
        dealerCode: any;
        assessmentDate: any;
        outstandingAmount: any;
        daysPastDue: any;
        riskCategory: any;
        probabilityOfDefault: any;
        lossGivenDefault: any;
        exposureAtDefault: any;
        expectedCreditLoss: any;
        forwardLookingAdjustment: any;
        finalECLAmount: any;
        tenantId: string;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    };
    static generateGPSPoints(startLat: number, startLng: number, totalKm: number, pointsCount?: number): {
        latitude: number;
        longitude: number;
        timestamp: string;
        speed: number;
        heading: number;
    }[];
    static createBulkClaims(count: number, overrides?: Partial<any>): {
        id: any;
        claimId: string;
        windowId: any;
        deliveryId: any;
        routeId: any;
        kmBeyondEqualisation: any;
        litresMoved: any;
        tariffPerLitreKm: any;
        amountDue: number;
        status: any;
        evidenceLinks: any;
        notes: any;
        tenantId: string;
        createdBy: string;
        submittedAt: any;
        submittedBy: any;
        submissionReference: any;
        amountPaid: any;
        paidAt: any;
        createdAt: Date;
        updatedAt: Date;
    }[];
    static createBulkDeliveries(count: number, overrides?: Partial<any>): {
        id: any;
        consignmentNumber: string;
        tenantId: string;
        routeId: any;
        litresLoaded: any;
        litresReceived: any;
        loadingDate: any;
        deliveryDate: any;
        driverName: any;
        vehicleNumber: any;
        depotName: any;
        stationName: any;
        productType: any;
        tankNumber: any;
        temperature: any;
        density: any;
        createdAt: Date;
        updatedAt: Date;
    }[];
    static createConcurrentTestScenario(): {
        claims: {
            id: any;
            claimId: string;
            windowId: any;
            deliveryId: any;
            routeId: any;
            kmBeyondEqualisation: any;
            litresMoved: any;
            tariffPerLitreKm: any;
            amountDue: number;
            status: any;
            evidenceLinks: any;
            notes: any;
            tenantId: string;
            createdBy: string;
            submittedAt: any;
            submittedBy: any;
            submissionReference: any;
            amountPaid: any;
            paidAt: any;
            createdAt: Date;
            updatedAt: Date;
        }[];
        deliveries: {
            id: any;
            consignmentNumber: string;
            tenantId: string;
            routeId: any;
            litresLoaded: any;
            litresReceived: any;
            loadingDate: any;
            deliveryDate: any;
            driverName: any;
            vehicleNumber: any;
            depotName: any;
            stationName: any;
            productType: any;
            tankNumber: any;
            temperature: any;
            density: any;
            createdAt: Date;
            updatedAt: Date;
        }[];
        pricingWindows: {
            id: any;
            windowId: any;
            title: any;
            startDate: any;
            endDate: any;
            status: any;
            npaGuidelineDocId: any;
            effectiveRegions: any;
            approvalRequiredBy: any;
            tenantId: string;
            createdBy: string;
            approvedBy: any;
            approvedAt: any;
            createdAt: Date;
            updatedAt: Date;
        }[];
        dealers: {
            id: any;
            dealerCode: any;
            businessName: any;
            contactPerson: any;
            phoneNumber: any;
            emailAddress: any;
            physicalAddress: any;
            gpsCoordinates: any;
            regionId: any;
            districtId: any;
            licenseNumber: any;
            licenseExpiryDate: any;
            creditLimit: any;
            currentBalance: any;
            marginPercentage: any;
            isActive: any;
            tenantId: string;
            createdBy: string;
            createdAt: Date;
            updatedAt: Date;
        }[];
    };
    static createVarianceScenario(): {
        delivery: {
            id: any;
            consignmentNumber: string;
            tenantId: string;
            routeId: any;
            litresLoaded: any;
            litresReceived: any;
            loadingDate: any;
            deliveryDate: any;
            driverName: any;
            vehicleNumber: any;
            depotName: any;
            stationName: any;
            productType: any;
            tankNumber: any;
            temperature: any;
            density: any;
            createdAt: Date;
            updatedAt: Date;
        };
        claim: {
            windowId: any;
            deliveryId: any;
            routeId: any;
            kmActual: any;
            litresMoved: any;
            gpsTrace: any;
            evidenceLinks: any;
        };
    };
    static createAgingClaimsScenario(): {
        id: any;
        claimId: string;
        windowId: any;
        deliveryId: any;
        routeId: any;
        kmBeyondEqualisation: any;
        litresMoved: any;
        tariffPerLitreKm: any;
        amountDue: number;
        status: any;
        evidenceLinks: any;
        notes: any;
        tenantId: string;
        createdBy: string;
        submittedAt: any;
        submittedBy: any;
        submissionReference: any;
        amountPaid: any;
        paidAt: any;
        createdAt: Date;
        updatedAt: Date;
    }[];
    static createPaymentVarianceScenario(): {
        id: any;
        claimId: string;
        windowId: any;
        deliveryId: any;
        routeId: any;
        kmBeyondEqualisation: any;
        litresMoved: any;
        tariffPerLitreKm: any;
        amountDue: number;
        status: any;
        evidenceLinks: any;
        notes: any;
        tenantId: string;
        createdBy: string;
        submittedAt: any;
        submittedBy: any;
        submissionReference: any;
        amountPaid: any;
        paidAt: any;
        createdAt: Date;
        updatedAt: Date;
    }[];
    static getTenantId(): string;
    static getUserId(): string;
}
//# sourceMappingURL=test-data-factory.d.ts.map