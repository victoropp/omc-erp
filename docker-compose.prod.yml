version: '3.8'

# Production Docker Compose Configuration
# This file provides the complete production setup for all services

services:
  # ==============================================
  # INFRASTRUCTURE SERVICES
  # ==============================================
  
  # PostgreSQL Database - Primary
  postgres-primary:
    image: postgres:15-alpine
    container_name: omc-erp-postgres-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-omc_erp_prod}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPL_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPL_PASSWORD:-replicator123}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./packages/database/migrations:/docker-entrypoint-initdb.d
      - ./scripts/postgres/postgresql-primary.conf:/etc/postgresql/postgresql.conf
      - ./scripts/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - '5432:5432'
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database - Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: omc-erp-postgres-replica
    environment:
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPL_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPL_PASSWORD:-replicator123}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: omc-erp-timescaledb
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-timescale}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-timescale}
      POSTGRES_DB: ${TIMESCALE_DB:-omc_erp_timeseries}
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/timescale/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5434:5432'
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-timescale}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cluster - Master
  redis-master:
    image: redis:7-alpine
    container_name: omc-erp-redis-master
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./scripts/redis/redis-master.conf:/etc/redis/redis.conf
    ports:
      - '6379:6379'
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cluster - Slave
  redis-slave:
    image: redis:7-alpine
    container_name: omc-erp-redis-slave
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_slave_data:/data
      - ./scripts/redis/redis-slave.conf:/etc/redis/redis.conf
    ports:
      - '6380:6379'
    networks:
      - omc-erp-network
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MongoDB for document storage
  mongodb-primary:
    image: mongo:6
    container_name: omc-erp-mongodb-primary
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-omc_erp_docs}
    volumes:
      - mongo_primary_data:/data/db
      - ./scripts/mongo/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js
    ports:
      - '27017:27017'
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==============================================
  # MESSAGE QUEUE & STREAMING
  # ==============================================
  
  # Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: omc-erp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kafka Broker 1
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: omc-erp-kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '19092:19092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kafka Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: omc-erp-kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9093:9093'
      - '19093:19093'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka2:29093
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Kafka Broker 3
  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: omc-erp-kafka3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9094:9094'
      - '19094:19094'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka3:29094
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9094"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==============================================
  # STORAGE & FILE MANAGEMENT
  # ==============================================
  
  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: omc-erp-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - omc-erp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==============================================
  # APPLICATION SERVICES
  # ==============================================
  
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: omc-erp-api-gateway
    environment:
      NODE_ENV: production
      PORT: 3000
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
      SERVICE_REGISTRY_ENABLED: true
    ports:
      - '3000:3000'
    networks:
      - omc-erp-network
    depends_on:
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: omc-erp-auth-service
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Transaction Service
  transaction-service:
    build:
      context: .
      dockerfile: services/transaction-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_DB: ${TIMESCALE_DB:-omc_erp_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Station Service
  station-service:
    build:
      context: .
      dockerfile: services/station-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Pricing Service
  pricing-service:
    build:
      context: .
      dockerfile: services/pricing-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3004
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # UPPF Service
  uppf-service:
    build:
      context: .
      dockerfile: services/uppf-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3005
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Configuration Service
  configuration-service:
    build:
      context: .
      dockerfile: services/configuration-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3007
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-omc_erp_prod}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka1:29092,kafka2:29093,kafka3:29094
    networks:
      - omc-erp-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Dashboard Frontend
  dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
    container_name: omc-erp-dashboard
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api-gateway:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - '80:3000'
    networks:
      - omc-erp-network
    depends_on:
      - api-gateway
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

networks:
  omc-erp-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_primary_data:
  postgres_replica_data:
  timescale_data:
  redis_master_data:
  redis_slave_data:
  mongo_primary_data:
  zookeeper_data:
  zookeeper_logs:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  minio_data: